from solver.nonogram import Nonogram

class TestExamples:

    def run_all_tests(self):
        self.test_example_0()
        self.test_example_1()
        self.test_example_2()
        self.test_example_3()
        self.test_example_4()
        self.test_example_5()

    def test_example_0(self):
        clues = (((3, 1), (4,), (1, 1, 1), (1,2), (1,1,1)),
              ((5,), (2,), (3,), (2, ), (1,3)))
        ans = ((1, 1, 1, 1, 1),
               (1, 1, 0, 0, 0),
               (1, 1, 1, 0, 1),
               (0, 1, 0, 1, 0),
               (1, 0, 1, 1, 1))
        gram = Nonogram(clues)
        print(gram.solve())
        assert gram.solve() == ans


    def test_example_1(self):
        clues = (((1, 1), (4,), (1, 1, 1), (3,), (1,)),
              ((1,), (2,), (3,), (2, 1), (4,)))
        ans = ((0, 0, 1, 0, 0),
               (1, 1, 0, 0, 0),
               (0, 1, 1, 1, 0),
               (1, 1, 0, 1, 0),
               (0, 1, 1, 1, 1))
        gram = Nonogram(clues)
        print(gram.solve())
        assert gram.solve() == ans


    def test_example_2(self):
        clues = (((1,), (3,), (1,), (3, 1), (3, 1)),
              ((3,), (2,), (2, 2), (1,), (1, 2)))
        ans = ((0, 0, 1, 1, 1),
            (0, 0, 0, 1, 1),
            (1, 1, 0, 1, 1),
            (0, 1, 0, 0, 0),
            (0, 1, 0, 1, 1))
        gram = Nonogram(clues)
        print(gram.solve())
        assert gram.solve() == ans


    def test_example_3(self):
        clues = (((3,), (2,), (1, 1), (2,), (4,)),
              ((2,), (3, 1), (1, 2), (3,), (1,)))
        ans = ((1, 1, 0, 0, 0),
               (1, 1, 1, 0, 1),
               (1, 0, 0, 1, 1),
               (0, 0, 1, 1, 1),
               (0, 0, 0, 0, 1))
        gram = Nonogram(clues)
        print(gram.solve())
        assert gram.solve() == ans


    def test_example_3(self):
        clues = (((3,), (4,), (3,), (2,), (1,)),
                ((3,), (3,), (3,), (2,), (2,)))
        ans = ((0, 0, 1, 1, 1),
               (0, 1, 1, 1, 0),
               (1, 1, 1, 0, 0),
               (1, 1, 0, 0, 0),
               (1, 1, 0, 0, 0))
        gram = Nonogram(clues)
        print(gram.solve())
        assert gram.solve() == ans

    def test_example_4(self):
        clues = (((7, 4, 4, 4), (3, 5, 1, 8), (2, 1, 2, 3), (2, 4, 1, 2, 1), (1, 3, 3, 1, 1), (2, 13, 1), (3, 1, 3, 5, 1, 2), (2, 7, 7, 2), (3, 1, 4, 1, 9), (3, 5, 2, 3, 2), (2, 1, 4, 1, 3, 1), (2, 1, 7, 3, 1), (8, 1, 3, 2), (1, 1, 8, 1, 1, 3), (13, 2, 1, 1), (6, 12, 2), (3, 11, 2), (1, 4, 10, 2), (11, 3), (5, 5, 2, 1, 1), (2, 1, 4, 3, 1, 3), (6, 4, 1, 3), (5, 3, 1, 4), (5, 1, 1, 1, 1, 4), (4, 3, 3)), ((3, 7, 1, 4), (3, 8, 3, 5), (2, 1, 2, 2, 5), (1, 2, 5, 4), (1, 4, 4), (2, 1, 3, 7, 1), (2, 3, 7, 1, 1), (1, 2, 8, 3), (3, 11, 3, 1), (2, 12, 4), (1, 1, 4, 13), (2, 1, 1, 8, 1), (1, 2, 9, 1), (1, 3, 8, 2), (1, 3, 6, 1, 1), (6, 5), (1, 9, 1, 6), (11, 5), (2, 18), (2, 1, 2, 2, 8), (1, 1, 9, 1, 3), (2, 1, 3, 1, 2), (5, 3, 1, 1, 2, 2), (3, 1, 1, 2, 4, 2), (6, 8, 2)))
        args = (25, 25)
        gram = Nonogram(clues,*args)
        output = gram.solve()
        print(output)
        assert output is not None

    def test_example_5(self):
        clues = (((3, 1, 3, 1, 3), (2, 1, 1, 7, 1, 2), (3, 2, 1, 2, 1), (2, 1, 2, 1, 1), (1, 2, 2), (3, 3, 3, 1, 1), (4, 6, 1, 1, 1), (8, 3, 2, 1, 2), (11, 1, 1), (1, 2, 7, 1, 2, 1, 1), (1, 3, 2, 1, 1, 3, 1, 1), (2, 6, 5, 2), (2, 3, 4, 1, 3), (3, 2, 2, 1, 1, 1, 3), (3, 1, 2, 1, 6, 1, 1), (8, 5, 2, 1, 1), (6, 1, 4, 2, 2), (8, 4, 1, 3, 1), (2, 15, 1), (2, 4, 9), (3, 10), (1, 5, 2, 2, 2), (7, 5, 2), (2, 1, 4, 2, 1, 1), (2, 8, 2, 1)), ((3, 6), (2, 5, 7), (2, 6, 5, 1), (1, 2, 4, 5, 2), (1, 2, 1, 5, 2), (4, 6, 3, 1), (8, 5, 1, 1), (3, 4, 5, 1, 4), (1, 2, 5, 8), (1, 9, 1, 2, 2, 1), (1, 6, 1, 1, 3, 4), (2, 1, 1, 2, 1, 1, 3, 4), (3, 1, 2, 2, 5, 3), (2, 2, 4, 6, 2), (1, 1, 1, 1, 1, 6, 3, 1), (1, 1, 1, 1, 2, 4, 1), (2, 3, 7, 3, 2), (1, 1, 9), (1, 1, 2, 1, 8, 1), (2, 1, 1, 2, 4, 2), (1, 5), (2, 1, 4), (1, 1, 1, 2, 2, 1, 1), (3, 3, 3), (2, 6, 1, 1, 4)))
        args = (25, 25)
        gram = Nonogram(clues,*args)
        output = gram.solve()
        print(output)
        assert output is not None


tests = [
    [[(((1, 1), (4,), (1, 1, 1), (3,), (1,)), ((1,), (2,), (3,), (2, 1), (4,))) ,5 ,5],((0, 0, 1, 0, 0), (1, 1, 0, 0, 0), (0, 1, 1, 1, 0), (1, 1, 0, 1, 0), (0, 1, 1, 1, 1))],
[[(((3,), (4,), (2, 2, 2), (2, 4, 2), (6,), (3,)), ((4,), (6,), (2, 2), (2, 2), (2,), (2,), (2,), (2,), (), (2,), (2,))) ,6 ,11],((0, 1, 1, 1, 1, 0), (1, 1, 1, 1, 1, 1), (1, 1, 0, 0, 1, 1), (1, 1, 0, 0, 1, 1), (0, 0, 0, 1, 1, 0), (0, 0, 0, 1, 1, 0), (0, 0, 1, 1, 0, 0), (0, 0, 1, 1, 0, 0), (0, 0, 0, 0, 0, 0), (0, 0, 1, 1, 0, 0), (0, 0, 1, 1, 0, 0))],
[[(((1, 1, 3), (3, 2, 1, 3), (2, 2), (3, 6, 3), (3, 8, 2), (15,), (8, 5), (15,), (7, 1, 4, 2), (7, 9), (6, 4, 2), (2, 1, 5, 4), (6, 4), (2, 6), (2, 5), (5, 2, 1), (6, 1), (3, 1), (1, 4, 2, 1), (2, 2, 2, 2)), ((2, 1, 1), (3, 4, 2), (4, 4, 2), (8, 3), (7, 2, 2), (7, 5), (9, 4), (8, 2, 3), (7, 1, 1), (6, 2), (5, 3), (3, 6, 3), (2, 9, 2), (1, 8), (1, 6, 1), (3, 1, 6), (5, 5), (1, 3, 8), (1, 2, 6, 1), (1, 1, 1, 3, 2))) ,20 ,20],((1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), (0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1), (1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0), (0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0), (0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1), (0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1), (0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0), (0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0), (0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0), (0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1), (1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1), (1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0), (1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0), (0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0), (0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0), (0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1), (0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1))],
[[(((2, 1, 3, 3, 7), (2, 2, 7), (5, 1, 1, 1, 8), (6, 1, 1, 3, 4), (6, 1, 1, 3, 1, 1), (8, 2, 1, 4), (1, 6, 1, 2, 1), (1, 6, 1, 3, 4), (1, 2, 2, 1, 4), (1, 1, 6, 4, 3, 4), (1, 3, 1, 7, 7), (3, 6, 3, 3), (2, 3, 3, 5), (1, 3, 2), (2, 1, 1, 1, 2), (2, 5, 1, 2), (1, 13), (1, 2, 11), (1, 2, 4, 6, 1), (2, 1, 3, 5, 3), (5, 5, 2, 1, 2), (6, 3, 5), (1, 1, 4, 3, 1), (3, 1, 6, 3, 1), (4, 3, 6, 2, 2)), ((5, 2, 2, 3), (6, 3, 2), (5, 2, 2), (1, 4, 4, 4, 1), (7, 1, 1, 6), (2, 5, 2, 2, 1), (1, 1, 5, 2, 3, 2), (1, 5, 6, 3, 1), (3, 5, 2, 1), (1, 2, 1, 2, 1, 3, 1, 2), (1, 1, 1, 3, 4, 2), (1, 3, 2, 9), (4, 11), (3, 3, 1, 3, 5), (1, 12, 3), (5, 6), (1, 5, 2, 5), (3, 1, 1, 4), (5, 1, 2, 7), (4, 4, 3, 4), (3, 3, 2, 4), (4, 8, 2, 5), (11, 1, 1, 1), (4, 1, 4, 1, 2, 3), (2, 8, 3, 1))) ,25 ,25],((1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1), (1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1), (0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1), (1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1), (0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0), (1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1), (1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1), (1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1), (0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0), (1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1), (1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1), (1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1), (0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1), (0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1), (0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0), (0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0), (0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0), (1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0), (1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0), (1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1), (1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0), (1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1), (1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1))],
[[(((4, 2, 2), (2, 2, 1, 3, 1), (2, 1, 1, 1), (1, 2, 1, 1, 1, 1, 1), (2, 1, 1, 1, 1), (3, 1, 1, 3, 1), (1, 3, 1, 1, 1), (2, 2, 3), (1, 1, 1, 1, 2), (4, 1, 1, 2, 1), (1, 1, 3, 2), (2, 1, 2, 2, 2), (1, 2, 4, 1), (1, 2, 1, 1), (1, 6, 2)), ((3, 4), (2, 2, 3, 1), (2, 3, 2), (1, 1, 1, 1, 2), (1, 2, 4, 2), (2, 2, 2), (6, 1, 1, 1), (1, 1, 3, 1), (2, 3, 4, 1), (1, 1, 1, 1, 1, 1), (1, 1, 1, 3, 1, 2), (1, 3, 3), (1, 1, 1, 2, 1), (1, 1, 1, 2, 1, 2), (2, 3, 2, 1))) ,15 ,15],((0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1), (0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0), (1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0), (1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0), (1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0), (1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1), (0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1), (0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1), (1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1), (1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1), (0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1), (0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0), (0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0), (1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1), (1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1))],
[[(((2, 2), (2,), (3,), (1,), (3,)), ((1,), (1,), (4,), (3, 1), (1, 1, 1))) ,5 ,5],((1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 1, 1), (1, 1, 1, 0, 1), (1, 0, 1, 0, 1))],
[[(((1, 1), (4, 1), (1, 1, 1, 1), (2, 2), (3, 2, 1), (1, 1, 2, 1, 1), (2, 1), (1, 2, 2, 2), (3, 2, 2), (1, 1, 1), (1, 1, 1, 1, 1), (3, 2, 1), (2, 2), (1, 3, 1), (2, 2)), ((3, 1, 2, 2, 2), (2, 2, 1, 1, 1), (2, 2, 6), (1, 1, 2, 2), (1, 1, 1, 3, 1), (1, 1, 2, 1, 1), (2, 1, 2, 1), (3, 3), (1, 1, 5), (1, 2), (3,))) ,15 ,11],((0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1), (1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1), (0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0), (0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0), (1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0), (0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0), (0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1), (0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1), (0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0), (0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0))],
[[(((3, 3, 1, 3), (3, 3, 1, 1, 4), (6, 1, 1, 2, 3), (4, 1, 1, 8), (4, 2, 7, 2), (1, 2, 3, 1), (4, 5), (3, 3, 4, 1, 1), (1, 1, 1, 1, 7), (4, 2, 1, 4), (1, 4, 3, 4), (1, 1, 1, 1, 5, 1), (6, 2, 6, 4), (5, 1, 3, 1, 4), (1, 1, 1, 5, 1, 5), (4, 8, 1, 1), (6, 9), (4, 1, 1, 6), (5, 2, 5), (9, 2, 1), (10, 2, 4, 1), (5, 3, 3, 3, 1), (5, 4, 4, 1), (4, 8, 2, 1), (5, 8, 1, 1, 1)), ((2, 11), (3, 10), (6, 11), (3, 2, 10), (4, 1, 1, 5, 1), (5, 2, 2, 2, 2), (3, 1, 4, 3, 1), (1, 1, 2, 7), (4, 2, 6), (1, 2, 1, 5), (2, 1, 1, 2, 2), (1, 1, 5, 4, 4), (1, 4, 1, 4, 4), (1, 1, 4, 2, 11), (1, 11, 3), (2, 1, 9), (1, 1, 8, 4), (2, 5, 2, 5, 1), (6, 1, 2, 1), (7, 1, 1, 1, 1), (3, 3, 1, 1, 3), (1, 3, 4, 4, 2, 2), (4, 7, 1, 1), (5, 3, 3, 1, 1), (5, 1, 2, 1, 2))) ,25 ,25],((1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1), (1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0), (1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0), (1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), (0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1), (0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1), (0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1), (0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1), (0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1), (0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1), (0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0), (0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0), (1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1), (0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0), (0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0), (0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0), (0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1), (1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0), (1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0), (1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1))],
[[(((5, 5), (4, 6), (1, 3, 2, 3), (4, 6), (5, 3, 1), (4, 3, 4), (4, 5, 3), (1, 4, 5), (1, 2, 1), (3, 3, 3, 1), (1, 1, 9), (2, 1, 6), (7, 3), (3, 9, 1), (3, 4, 3, 1)), ((3, 3, 2), (4, 1, 1, 2), (4, 2, 3), (7, 1), (2, 2, 4), (4, 2, 3), (3, 1, 5, 3), (1, 1, 4, 2, 3), (5, 5), (3, 2, 2, 2), (4, 8), (2, 1, 1, 8), (4, 3, 5), (8, 2), (3, 6, 2))) ,15 ,15],((0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1), (0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1), (0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0), (1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1), (1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1), (1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1), (1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1), (0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0), (0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1), (1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0), (1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0), (1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1))],
[[(((3, 3), (3, 2), (4, 4), (9,), (3, 3)), ((1,), (1,), (2,), (3,), (4,), (3,), (3,), (1, 1), (1, 3), (5,), (4,), (2,))) ,5 ,12],((1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 1, 0, 0, 0), (0, 1, 1, 1, 0), (0, 1, 1, 1, 1), (0, 0, 1, 1, 1), (0, 0, 1, 1, 1), (1, 0, 0, 1, 0), (1, 0, 1, 1, 1), (1, 1, 1, 1, 1), (0, 1, 1, 1, 1), (0, 0, 1, 1, 0))],
[[(((3, 1), (2,), (2,), (1, 1), (3,)), ((4,), (3,), (1, 1), (1,), (1, 2))) ,5 ,5],((1, 1, 1, 1, 0), (1, 1, 1, 0, 0), (1, 0, 0, 0, 1), (0, 0, 0, 0, 1), (1, 0, 0, 1, 1))],
[[(((3,), (1, 1), (2,), (3,), (2, 1)), ((1, 1), (1, 1), (4,), (3,), (1, 1))) ,5 ,5],((1, 0, 0, 0, 1), (1, 0, 0, 0, 1), (1, 1, 1, 1, 0), (0, 0, 1, 1, 1), (0, 1, 0, 1, 0))],
[[(((1, 1), (3, 1), (3,), (3,), (1,)), ((3,), (2,), (3,), (2,), (2, 1))) ,5 ,5],((1, 1, 1, 0, 0), (0, 1, 1, 0, 0), (0, 1, 1, 1, 0), (0, 0, 0, 1, 1), (1, 1, 0, 1, 0))],
[[(((4,), (2, 4), (2, 1, 4), (1, 1, 1, 1), (1, 1, 1, 1, 2, 1), (1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1), (1, 1, 1, 2, 2, 1), (1, 1, 3, 1), (1, 1, 5, 1), (1, 4, 5), (1, 5, 1), (5, 4, 1), (5, 2), (6,)), ((10,), (1, 1), (9, 1), (1, 1, 1), (8, 1, 2), (1, 1, 2, 1), (1, 2, 1, 1), (1, 4, 1, 1, 1), (2, 1, 1, 1, 2), (1, 1, 2, 1), (1, 2, 1, 2, 1, 1), (2, 1, 2, 1, 1, 1), (1, 1, 1, 1), (1, 1, 2), (12,))) ,15 ,15],((0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0), (0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0), (0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0), (0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0), (0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0), (1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0), (1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0), (1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0), (1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1), (0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1), (0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1), (0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1), (0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1), (0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1), (0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0))],
[[(((2,), (3,), (4,), (1, 1), (1, 1)), ((2,), (3, 1), (3,), (1, 1), (2,))) ,5 ,5], ((1, 1, 0, 0, 0), (1, 1, 1, 0, 1), (0, 1, 1, 1, 0), (0, 0, 1, 0, 1), (0, 0, 1, 1, 0))],
[[(((2, 1, 1), (2, 1, 1, 1, 1), (1, 1, 3, 2), (1, 2, 2), (2, 1, 1), (4, 1, 2, 1), (4, 1), (5,), (5, 1), (4, 1, 2, 2), (2, 2, 1), (2, 1, 1, 1), (1, 2, 1, 2), (1, 1, 1, 2), (2, 1)), ((1, 1), (1, 1), (1, 1), (2, 2), (1, 1), (2, 1, 1, 2), (2, 1, 5, 2, 1), (1, 1, 1, 2, 2, 1), (1, 3, 1, 1, 1, 1), (2, 1, 3, 2), (2, 1, 2, 3), (1, 2, 1, 1, 2), (1, 2, 1, 1, 1), (1, 1, 2, 1), (2, 2))) ,15 ,15],((0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0), (0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1), (1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1), (1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0), (0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1), (0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0), (0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0), (1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0), (0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0), (1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0), (0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0))]]


class TestMultisizeNanograms:

    tests = tests
    param = None
    result = None
    i = None

    def test_all(self):
        for i,test in enumerate(self.tests):
            param, result = test
            r = Nonogram(*param).solve()
            assert r == result
            string = f'{i}: {r} Should_Equal {result} '
            string = string + ' Correct!' if r == result else string + ' Incorrect!'
            print(string,"\n")
